<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo搭建博客——发布到github和coding]]></title>
    <url>%2F2018%2F08%2F09%2Fhexo1%2F</url>
    <content type="text"><![CDATA[前言 上一篇文章我们已经在本地成功启动了博客，但是我们我们的目的是想发布到互联网上，但是我们又不想自己买个云服务器，所以我们选择github和coding的pages服务。 配置github以及codinggithub教程 1.github创建一个仓库，仓库名为：用户名.github.io （这是因为github规定的格式这样才会直接讲当前仓库作为托管站点）比如我的项目名字叫做 michloas.github.io，michloas是我的用户名。 2.获取ssh地址 3.github项目地址：https://github.com/michloas/michloas.github.io coding教程 1.coding创建一个仓库，仓库名为：用户名。我在coding上创建的项目为：michloas，michloas是我的用户名。 2.获取ssh地址 3.coding项目地址：https://coding.net/u/michloas/p/michloas/git 修改_config.yml配置 1.我们需要前往项目根目录下面找到_config.yml文件，找到deploy配置项，修改为下面显示的样子 deploy: type: git repo: github: git@github.com:michloas/michloas.github.io.git,master coding: git@git.coding.net:michloas/michloas.git,master 在配置文件中的样子如下所示 开始上传代码到github以及coding仓库对应的仓库上传代码 1.输入一下命令： hexo clean hexo g hexo d 2.如果出现error deployer not found:github错误，执行以下命令 npm install hexo-deployer-git --save 3.github 使用 github pages 功能 点击该仓库，选择setting，然后拖到GitHub Pages界面来, 然后选择Choose a theme，选择一个主题之后。再次点击setting来到GitHub Pages来，可以发现出现了一个路径，访问该路径，便可以访问到我们上传上去的博客页面了。 4.coding 使用 Pages服务 进入创建的项目,选择代码下的菜单Pages服务，点击下图中的一键开启开启静态pages 会出现下图的页面 因为我已经绑定了域名，所以显示的是我绑定的域名，一般没有绑定域名应该显示的是 michloas.coding.me/michloas ，输入访问地址则可以看到我们的博客网站了。 github以及coding绑定域名准备域名 推荐大家前往阿里云进行域名购买，其实各个云服务器商没有太大的区别。如果大家只是注册一个个人博客的话，推荐top结尾的域名，阿里云四块钱一年，非常便宜。 github域名解析配置 1.首先进入域名解析页面，新建一个域名解析，然后在记录值填写github提供的地址，解析线路我们这里选择境外，因为某些原因，我们再国内访问地址会存在问题，所以我们会在coding的配置解析选择国内的 2.然后我们回到github的setting的GitHub Pages下面Custom domain,添加刚刚购买的域名地址 3.上一步结束之后github会默认创建一个CNAME文件，为了防止以后我们提交github的时候删除点CNAME文件，然后在我们博客目录source下，新建一个CNAME文件，内容要跟github仓库根目录下的CNAME文件一样，就是我们解析的域名。 4.我们打开浏览器输入我们购买的域名，此时我们就可以使用我们的域名访问自己的博客网站。 coding域名解析配置 1.首先进入域名解析页面，新建两个域名解析配置，一个记录值为 pages.coding.me,另一个为项目对应的 michloas.coding.me 2.然后我们回到coding的pages，添加我们配置的域名 3.我们打开浏览器输入我们购买的域名，此时我们就可以使用我们的域名访问自己的博客网站。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建博客——准备环境]]></title>
    <url>%2F2018%2F08%2F05%2Fhexo%2F</url>
    <content type="text"><![CDATA[前言其实很早之前就想要建立自己的一个个人博客，但是之前对于很多东西不是太熟悉。最近自己对于一些网上的东西有了很系统的了解，所以下定决心自己搞一个个人博客。但是第一次使用很多不熟悉的地方，在此记录一下自己在使用过程中遇到的坑 背景现在网上的一些大神常用的主要有hexo和jekyll，我看了一些效果图，最终还是选用了hexo的Next主题，考虑到github的服务器在国外，国内访问的时候会很缓慢，并且最近github显示图片非常慢。在参考了一下网上的各位大神的教程之后，决定同时发布到coding和github上，在使用阿里云域名解析的时候，配置国内访问使用coding，境外访问使用github。这时候你再去访问的时候就会发现速度杠杠的。 配置Hexo环境git环境git的下载地址: https://git-scm.com/downloads 至于32位还是64位则看个人电脑情况选择了，安装是没有什么难度的。 nodejs环境nodejs网站：http://nodejs.cn/ 位数也依旧看个人电脑情况，安装成功之后，输入 node -v 和npm -v 可以查看是否安装成功。 初始化本地hexo博客安装hexo1.在任意目录下右键，选择Git Bash，输入下方命令 npm install -g hexo 2.新建一个文件夹用来防止hexo文件，建好文件夹后，在建好的文件夹上点击右键，选择Git Bash，输入下方命令， hexo会自动在此文件夹下初始化搭建博客所需要的所有文件。 hexo init 3.安装依赖包 npm install 等待安装结束后，会出现如下图的node_modules文件夹 4.hexo常用的命令 hexo g #完整命令为hexo generate，用于生成静态文件 hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览 hexo d #完整命令为hexo deploy，用于将本地文件发布到github上 hexo n #完整命令为hexo new，用于新建一篇文章 5.本地查看博客，执行下面命令就可以在本地看到hexo博客了 hexo g hexo s 然后用浏览器访问http://localhost:4000/，此时可以看到一个本地的初始化的博客网站 ps: 使用hexo s 启动本地博客的时候，你发现你访问失败了，此时不用担心，不是初始化的有问题，一般是你的4000端口被占用了，如果你安装了福昕阅读器，那么恭喜你，你的4000端口被占用了。我们会使用下面的命令来指定端口访问就可以了 hexo s -p 5000 此时你在浏览器输入http://localhost:5000/，就可以看到自己初始化的博客了。 参考地址： hexo+github教程之二：hexo博客发布到github hexo安装成功，并且正确运行，但是localhost:4000不能访问 域名+解析+GitHub来搭建自己的个人网站 Hexo+Next主题优化 hexo生成博文插入图片]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
